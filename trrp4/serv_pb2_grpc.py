# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import serv_pb2 as serv__pb2


class Sender_stock_infStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send_stock_quotes = channel.unary_unary(
                '/Sender_stock_inf/Send_stock_quotes',
                request_serializer=serv__pb2.stock_quotes_inp.SerializeToString,
                response_deserializer=serv__pb2.stock_quotes_rez.FromString,
                )
        self.chek = channel.unary_unary(
                '/Sender_stock_inf/chek',
                request_serializer=serv__pb2.chek_msg.SerializeToString,
                response_deserializer=serv__pb2.chek_stat.FromString,
                )


class Sender_stock_infServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send_stock_quotes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Sender_stock_infServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send_stock_quotes': grpc.unary_unary_rpc_method_handler(
                    servicer.Send_stock_quotes,
                    request_deserializer=serv__pb2.stock_quotes_inp.FromString,
                    response_serializer=serv__pb2.stock_quotes_rez.SerializeToString,
            ),
            'chek': grpc.unary_unary_rpc_method_handler(
                    servicer.chek,
                    request_deserializer=serv__pb2.chek_msg.FromString,
                    response_serializer=serv__pb2.chek_stat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sender_stock_inf', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sender_stock_inf(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send_stock_quotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sender_stock_inf/Send_stock_quotes',
            serv__pb2.stock_quotes_inp.SerializeToString,
            serv__pb2.stock_quotes_rez.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def chek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sender_stock_inf/chek',
            serv__pb2.chek_msg.SerializeToString,
            serv__pb2.chek_stat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
